@import 'utilities';

// Need to define the raw colors somewhere!
// stylelint-disable color-no-hex, no-indistinguishable-colors, function-max-empty-lines
$color-palette-data: (
  white: (
    base: #ffffff
  ),

  black: (
    base: #000000
  ),

  slate: (
    lightest: #95a7b7,
    lighter: #798c9c,
    light: #454e57,
    base: #31373d,
    dark: #272c30,
    darker: #212529
  ),

  sky: (
    lighter: #fafbfc,
    light: #f5f6f7,
    base: #ebeef0,
    dark: #d3dbe2,
    darker: #c3cfd8
  ),

  blue: (
    lightest: #eff9fd,
    lighter: #cae9f7,
    light: #329cda,
    base: #0078bd,
    dark: #0069a6,
    darker: #005e94
  ),

  green: (
    lightest: #f8ffec,
    lighter: #e5fabc,
    light: #b2d86a,
    base: #96bf48,
    dark: #7ba232,
    darker: #4d6110
  ),

  yellow: (
    lightest: #fffbe9,
    lighter: #fff7b2,
    light: #ffe477,
    base: #ffd117,
    dark: #d4a002,
    darker: #6f4f0c
  ),

  orange: (
    lightest: #fff9ec,
    lighter: #ffebcc,
    light: #fec97d,
    base: #ff9517,
    dark: #e06b0c,
    darker: #7f3a07
  ),

  red: (
    lightest: #fef6f5,
    lighter: #ffd9d6,
    light: #ff9797,
    base: #ff5d5d,
    dark: #d83e3e,
    darker: #852929
  ),

  purple: (
    lightest: #faf1fe,
    lighter: #eccdff,
    light: #d098ff,
    base: #b762ff,
    dark: #763eaf,
    darker: #4a1f72
  ),

  teal: (
    lightest: #eafdf7,
    lighter: #c3f9e4,
    light: #78ecbc,
    base: #29bc94,
    dark: #15966d,
    darker: #186148
  ),

  shade: (
    light: rgba(#000000, 0.05),
    base: rgba(#000000, 0.1),
    dark: rgba(#000000, 0.16)
  ),

  ink: (
    lighter: hsl(0, 0%, 62%),
    light: hsl(0, 0%, 44%),
    base: hsl(0, 0%, 10%)
  ),

  action: (
    base: blue
  )
);


/// Returns the color value for a given color name and group.
///
/// @param {String} $hue - The color's hue.
/// @param {String} $value - The darkness/lightness of the color. Defaults to base.
/// @param {Color} $for-background - The background color on which this color will
/// appear. Applies a multiply filter to ensure appropriate contrast.
/// @return {Color} The color value.

@function color($hue, $value: base, $for-background: null) {
  $fetched-color: map-get(map-get($color-palette-data, $hue), $value);

  @if map-has-key($color-palette-data, $fetched-color) {
    $fetched-color: map-get(map-get($color-palette-data, $fetched-color), $value);
  }

  @if $for-background != null {
    $fetched-color: color-multiply($fetched-color, $for-background);
  }

  @if type-of($fetched-color) == color {
    @return $fetched-color;
  } @else {
    @error 'Color `#{$hue} - #{$value}` not found. Available colors: #{available-names($color-palette-data)}';
  }
}


/// Darkens the foreground color by the background color. This is the same as the
/// “multiply” filter in graphics apps.
///
/// @param {Color} $foreground - The color to darken.
/// @param {Color} $background - The background to base darkening on.
/// @return {Color} The modified color.

@function color-multiply($foreground, $background: null) {
  @if $background == null {
    $background: #ffffff;
  }

  @return $foreground * $background / 255;
}

// stylelint-enable color-no-hex, no-indistinguishable-colors, function-max-empty-lines
